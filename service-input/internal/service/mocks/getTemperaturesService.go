// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/getTemperaturesService.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/kameikay/service-input/internal/service"
)

// MockGetTemperatureServiceInterface is a mock of GetTemperatureServiceInterface interface.
type MockGetTemperatureServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGetTemperatureServiceInterfaceMockRecorder
}

// MockGetTemperatureServiceInterfaceMockRecorder is the mock recorder for MockGetTemperatureServiceInterface.
type MockGetTemperatureServiceInterfaceMockRecorder struct {
	mock *MockGetTemperatureServiceInterface
}

// NewMockGetTemperatureServiceInterface creates a new mock instance.
func NewMockGetTemperatureServiceInterface(ctrl *gomock.Controller) *MockGetTemperatureServiceInterface {
	mock := &MockGetTemperatureServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGetTemperatureServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTemperatureServiceInterface) EXPECT() *MockGetTemperatureServiceInterfaceMockRecorder {
	return m.recorder
}

// GetTemperatureService mocks base method.
func (m *MockGetTemperatureServiceInterface) GetTemperatureService(ctx context.Context, cep string) (service.GetTemperatureServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemperatureService", ctx, cep)
	ret0, _ := ret[0].(service.GetTemperatureServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemperatureService indicates an expected call of GetTemperatureService.
func (mr *MockGetTemperatureServiceInterfaceMockRecorder) GetTemperatureService(ctx, cep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemperatureService", reflect.TypeOf((*MockGetTemperatureServiceInterface)(nil).GetTemperatureService), ctx, cep)
}
