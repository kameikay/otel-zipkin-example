// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/weatherApi.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/kameikay/service-orchestration/internal/service"
)

// MockWeatherApiServiceInterface is a mock of WeatherApiServiceInterface interface.
type MockWeatherApiServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherApiServiceInterfaceMockRecorder
}

// MockWeatherApiServiceInterfaceMockRecorder is the mock recorder for MockWeatherApiServiceInterface.
type MockWeatherApiServiceInterfaceMockRecorder struct {
	mock *MockWeatherApiServiceInterface
}

// NewMockWeatherApiServiceInterface creates a new mock instance.
func NewMockWeatherApiServiceInterface(ctrl *gomock.Controller) *MockWeatherApiServiceInterface {
	mock := &MockWeatherApiServiceInterface{ctrl: ctrl}
	mock.recorder = &MockWeatherApiServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherApiServiceInterface) EXPECT() *MockWeatherApiServiceInterfaceMockRecorder {
	return m.recorder
}

// GetWeatherData mocks base method.
func (m *MockWeatherApiServiceInterface) GetWeatherData(ctx context.Context, location string) (*service.WeatherAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherData", ctx, location)
	ret0, _ := ret[0].(*service.WeatherAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherData indicates an expected call of GetWeatherData.
func (mr *MockWeatherApiServiceInterfaceMockRecorder) GetWeatherData(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherData", reflect.TypeOf((*MockWeatherApiServiceInterface)(nil).GetWeatherData), ctx, location)
}
